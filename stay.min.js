(()=>{const e="files";let t;const r=()=>new Promise(((r,a)=>{const o=indexedDB.open("StayFS",1);o.onupgradeneeded=()=>{o.result.createObjectStore(e,{keyPath:"path"}).createIndex("dir","dir",{unique:!1})},o.onsuccess=()=>{t=o.result,r()},o.onerror=()=>a(o.error)})),a=e=>{const t=e.replace(/\/+/g,"/");return t.substring(0,t.lastIndexOf("/"))||"/"},o=async()=>t||await r(),n=e=>(e.startsWith("/")||(e="/"+e),e.replace(/\/+/g,"/")),s=async(r,s)=>{try{await o(),r=n(r);const c=t.transaction(e,"readwrite"),i=c.objectStore(e),l=(new Date).toISOString(),d={path:r,name:r.split("/").pop(),dir:a(r),content:s||"",size:(s||"").length,type:"file",createdAt:l,updatedAt:l};return i.put(d),console.log(`💾 Saved: ${r}`),c.complete}catch(e){throw new Error(`Failed to write file ${r}: ${e.message}`)}},c=async r=>{try{return await o(),r=n(r),new Promise(((a,o)=>{const n=t.transaction(e,"readonly").objectStore(e).get(r);n.onsuccess=()=>{n.result?a(n.result.content):o(new Error(`File not found: ${r}`))},n.onerror=()=>o(n.error)}))}catch(e){throw new Error(`Failed to read file ${r}: ${e.message}`)}},i=async r=>{try{await o(),r=n(r);const a=t.transaction(e,"readwrite");return a.objectStore(e).delete(r),console.log(`🗑️ Deleted: ${r}`),a.complete}catch(e){throw new Error(`Failed to delete file ${r}: ${e.message}`)}},l=async(r="/")=>{try{return await o(),(r=n(r)).endsWith("/")||(r+="/"),new Promise((a=>{const o=t.transaction(e,"readonly").objectStore(e).index("dir"),n=IDBKeyRange.only(r),s=[];o.openCursor(n).onsuccess=e=>{const t=e.target.result;t?(s.push({name:t.value.name,path:t.value.path,size:t.value.size,type:t.value.type||"file",createdAt:t.value.createdAt,updatedAt:t.value.updatedAt}),t.continue()):a(s)}}))}catch(e){throw new Error(`Failed to list files in ${r}: ${e.message}`)}},d=async r=>{try{return await o(),r=n(r),new Promise((a=>{const o=t.transaction(e,"readonly").objectStore(e).get(r);o.onsuccess=()=>a(!!o.result),o.onerror=()=>a(!1)}))}catch(e){return!1}},u=async r=>{try{return await o(),r=n(r),new Promise(((a,o)=>{const n=t.transaction(e,"readonly").objectStore(e).get(r);n.onsuccess=()=>{const e=n.result;if(!e)return o(new Error(`File not found: ${r}`));a({name:e.name,path:e.path,size:e.size||e.content.length,type:e.type||"file",createdAt:e.createdAt,updatedAt:e.updatedAt})},n.onerror=()=>o(n.error)}))}catch(e){throw new Error(`Failed to get file stats for ${r}: ${e.message}`)}},w=async(e,t)=>{try{const r=await c(e);await s(t,r),console.log(`📋 Copied: ${e} → ${t}`)}catch(r){throw new Error(`Failed to copy file from ${e} to ${t}: ${r.message}`)}},p=async(e,t)=>{try{await w(e,t),await i(e),console.log(`🔄 Moved: ${e} → ${t}`)}catch(r){throw new Error(`Failed to move file from ${e} to ${t}: ${r.message}`)}},y=async(e,t)=>{try{await p(e,t),console.log(`✏️ Renamed: ${e} → ${t}`)}catch(r){throw new Error(`Failed to rename file from ${e} to ${t}: ${r.message}`)}},h=async()=>{try{return await o(),new Promise((r=>{const a=t.transaction(e,"readonly").objectStore(e),o=[];a.openCursor().onsuccess=e=>{const t=e.target.result;t?(o.push({name:t.value.name,path:t.value.path,size:t.value.size,type:t.value.type||"file",createdAt:t.value.createdAt,updatedAt:t.value.updatedAt}),t.continue()):r(o)}}))}catch(e){throw new Error(`Failed to get all files: ${e.message}`)}}})();window.stay={init:async()=>await o(),writeFile:s,readFile:c,deleteFile:i,listFiles:l,exists:d,stat:u,copy:w,move:p,rename:y,all:h};})();
